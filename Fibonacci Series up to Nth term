using recursion
TC:O(2^n), SC:O(n)

The space complexity of the recursive Fibonacci implementation is O(n) due to the function call stack
where n is the input parameter representing the index of the Fibonacci sequence

class Solution {

    long[] Series(int N) {
         long arr[] = new long[N+1];
         
        for(int i=0; i<=N; i++){
            
            arr[i] = fibSeries(i);
        }
          
       return arr;
    }
    
    private static long fibSeries(int n){
        
        if(n<=1){
            return n;
        }
        else{
            return fibSeries(n-1) + fibSeries(n-2);
        }
    }
}



2nd recursion approach: by using Memoization is a technique 

int the above code complexity is O(2^n), by using Memoization it reduce to O(n), SC:O(n)--recursive stack

The memoization technique helps to improve the performance of recursive algorithms, as it eliminates duplicate computations 
and reduces the time complexity. By storing previously computed values in memory, subsequent function calls with the
 same arguments can be resolved in constant time


class Solution {

 Map<Integer, Long> memo = new HashMap<>();
 
    long[] Series(int N) {
         long arr[] = new long[N+1];
         
        for(int i=0; i<=N; i++){
            
            arr[i] = fibonacci(i);
        }
          
       return arr;
    }
    
   private long fibonacci(int n) {
        if (n <= 1) {
            return n;
        }

        if (memo.containsKey(n)) {
            return memo.get(n);
        }

        long result = fibonacci(n - 1) + fibonacci(n - 2);
        memo.put(n, result);
        return result;
    }
}

without recursion
TC: O(n), SC-O(1)
class Solution {

    long[] Series(int N) {
         long arr[] = new long[N+1];
         
         arr[0] = 0;
         arr[1] = 1;
         
         if(N>1){
             
             for(int i=2; i<=N; i++){
                 arr[i] = arr[i-1] + arr[i-2];
             }
         }
          
       return arr;
    }
}